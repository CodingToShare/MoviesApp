name: Build and Deploy to Azure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: movieappsoftwarecolombia
  AZURE_FUNCTIONAPP_NAME: moviesapp-functions
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '18.x'
  AZURE_RESOURCE_GROUP: moviesapp-rg
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

jobs:
  # ===============================
  # BUILD & TEST JOB
  # ===============================
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üõ†Ô∏è Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: üì¶ Restore dependencies
      run: dotnet restore MoviesApp.sln

    - name: üî® Build solution
      run: dotnet build MoviesApp.sln --no-restore --configuration Release

    - name: üß™ Run unit tests
      run: |
        dotnet test MoviesApp.Tests/MoviesApp.Tests.csproj \
          --no-build \
          --configuration Release \
          --logger trx \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults

    - name: üìä Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: ./TestResults

    - name: üìä Code Coverage Report
      uses: codecov/codecov-action@v3
      if: success()
      with:
        directory: ./TestResults
        flags: unittests
        name: MoviesApp Coverage

    # ===============================
    # SECURITY SCANNING
    # ===============================
    - name: üîí Run security scan
      run: |
        dotnet list MoviesApp.sln package --vulnerable --include-transitive || true
        
    - name: üîç Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp

    - name: üîç Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  # ===============================
  # BUILD API ARTIFACT
  # ===============================
  build-api:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üõ†Ô∏è Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: üî® Build API
      run: |
        dotnet publish MoviesApp.API/MoviesApp.API.csproj \
          --configuration Release \
          --output ./api-artifact

    - name: üì¶ Upload API artifact
      uses: actions/upload-artifact@v4
      with:
        name: api-package
        path: ./api-artifact

  # ===============================
  # BUILD FUNCTIONS ARTIFACT
  # ===============================
  build-functions:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: üîÑ Checkout code
      uses: actions/checkout@v4

    - name: üõ†Ô∏è Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: üõ†Ô∏è Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üî® Build Functions
      run: |
        dotnet publish MoviesApp.Functions/MoviesApp.Functions.csproj \
          --configuration Release \
          --output ./functions-artifact

    - name: üì¶ Upload Functions artifact
      uses: actions/upload-artifact@v4
      with:
        name: functions-package
        path: ./functions-artifact

  # ===============================
  # DEPLOY TO PRODUCTION
  # ===============================
  deploy-production:
    needs: [build-api, build-functions]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: üì• Download API artifact
      uses: actions/download-artifact@v4
      with:
        name: api-package
        path: ./api-package

    - name: üì• Download Functions artifact
      uses: actions/download-artifact@v4
      with:
        name: functions-package
        path: ./functions-package

    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üöÄ Deploy API to Production
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: ./api-package

    - name: ‚öôÔ∏è Configure API App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        mask-inputs: false
        app-settings-json: |
          [
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "Production"
            },
            {
              "name": "JWT__SecretKey",
              "value": "${{ secrets.JWT_SECRET_KEY }}"
            },
            {
              "name": "JWT__Issuer", 
              "value": "https://movieappsoftwarecolombia.azurewebsites.net"
            },
            {
              "name": "JWT__Audience",
              "value": "https://movieappsoftwarecolombia.azurewebsites.net"
            }
          ]
        connection-strings-json: |
          [
            {
              "name": "DefaultConnection",
              "value": "${{ secrets.SQL_CONNECTION_STRING }}",
              "type": "SQLServer"
            }
          ]

    - name: üöÄ Deploy Functions to Production
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        package: ./functions-package

    - name: ‚öôÔ∏è Configure Functions App Settings
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        mask-inputs: false
        app-settings-json: |
          [
            {
              "name": "AzureWebJobsStorage",
              "value": "${{ secrets.BLOB_STORAGE_CONNECTION_STRING }}"
            },
            {
              "name": "BlobStorageConnectionString", 
              "value": "${{ secrets.BLOB_STORAGE_CONNECTION_STRING }}"
            },
            {
              "name": "SqlConnectionString",
              "value": "${{ secrets.SQL_CONNECTION_STRING }}"
            },
            {
              "name": "CsvContainerName",
              "value": "movies-csv"
            },
            {
              "name": "BackupContainerName", 
              "value": "movies-backup"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet-isolated"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            }
          ]

    - name: üè• Health Check - Production API
      run: |
        echo "Waiting for production deployment to be ready..."
        sleep 30
        
        HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
        
        for i in {1..10}; do
          if curl -f $HEALTH_URL; then
            echo "‚úÖ Production API is healthy"
            break
          else
            echo "‚è≥ Attempt $i: Production API not ready yet..."
            sleep 30
          fi
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Production API health check failed"
            exit 1
          fi
        done

    - name: üß™ Test API Endpoints
      run: |
        BASE_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        
        echo "üß™ Testing API endpoints..."
        
        # Test login endpoint
        echo "Testing login endpoint..."
        curl -X POST "$BASE_URL/auth/login" \
          -H "Content-Type: application/json" \
          -d '{"username":"admin@moviesapp.com","password":"Admin123!"}' \
          --fail --silent --show-error || echo "‚ö†Ô∏è Login test failed"
        
        echo "‚úÖ API deployment verification completed"

    # ===============================
    # POST-DEPLOYMENT TASKS
    # ===============================
    - name: üîî Notify Success
      if: success()
      run: |
        echo "‚úÖ Production deployment successful!"
        echo "üåê API URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        echo "‚ö° Functions URL: https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"
        echo "üìä Swagger: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/swagger"

    - name: üè∑Ô∏è Create Release Tag
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Generate version based on date and build number
        VERSION="v$(date +'%Y.%m.%d').${{ github.run_number }}"
        
        git tag $VERSION
        git push origin $VERSION
        
        echo "üè∑Ô∏è Created release tag: $VERSION"

  # ===============================
  # CLEANUP
  # ===============================
  cleanup:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üßπ Cleanup artifacts
      run: |
        echo "üßπ Cleaning up build artifacts..."
        # Cleanup steps if needed 